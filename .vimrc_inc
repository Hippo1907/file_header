" Filename: ~/.vimrc_inc
let name_corp = "Hippo Verification"
let dict_ext = {"svh":"//", "sv":"//", "v":"//", "py":"#", "pl":"#"}

func setHeader()
  let l_symbol = get(g:dict_ext, expand("%:e"), "//")  

  call setline(line(".")  ,  l_symbol)
  call setline(line(".")+1,  l_symbol . repeat("-", 100-strlen(l_symbol)))
  call setline(line(".")+2,  l_symbol . "   " . "Copyright " . strftime("%Y") . " " . g:name_corp)
  call setline(line(".")+3,  l_symbol)
  call setline(line(".")+4,  l_symbol . "   " . "Licensed under the Apache License, Version 2.0 (the \"License\");")
  call setline(line(".")+5,  l_symbol . "   " . "you may not use this file except in compliance with the License.")
  call setline(line(".")+6,  l_symbol . "   " . "You may obtain a copy of the License at")
  call setline(line(".")+7,  l_symbol)
  call setline(line(".")+8,  l_symbol . "   " . "  http://www.apache.org/licenses/LICENSE-2.0")
  call setline(line(".")+9,  l_symbol)
  call setline(line(".")+10, l_symbol . "   " . "Unless required by applicable law or agreed to in")
  call setline(line(".")+11, l_symbol . "   " . "writing, software distributed under the License is")
  call setline(line(".")+12, l_symbol . "   " . "distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR")
  call setline(line(".")+13, l_symbol . "   " . "CONDITIONS OF ANY KIND, either express or implied.  See")
  call setline(line(".")+14, l_symbol . "   " . "the License for the specific language governing")
  call setline(line(".")+15, l_symbol . "   " . "permissions and limitations under the License.")
  call setline(line(".")+16, l_symbol . repeat("-", 100-strlen(l_symbol)))
  call setline(line(".")+17, l_symbol . "   " . "File         : " . expand("%:t"))
  call setline(line(".")+18, l_symbol . "   " . "Author       : ". $USER)
  call setline(line(".")+19, l_symbol . "   " . "Created      : ". strftime("%Y-%m-%d"))
  call setline(line(".")+20, l_symbol . repeat("-", 100-strlen(l_symbol)))
  call setline(line(".")+21, l_symbol . "   " . "Description  :")
  call setline(line(".")+22, l_symbol . repeat("-", 100-strlen(l_symbol)))
  call setline(line(".")+23, l_symbol)

  " 
  call setline(line(".")+24, "")
  call cursor(line(".")+24,0)
endfunc

" Function: SetFormat
"
" Add header and description for class/function/task

func SetFormat(type)
  let l_symbol = get(g:dict_ext, expand("%:e"), "//")
  let l_indent = getline(".")
  let l_pos = getcurpos()[4]
  
  if a:type == "class"
    let str = l_symbol . repeat("-", 100-strlen(l_symbol)-l_pos+1) . "\n"
	    \ . l_indent . l_symbol . "\n"
	    \ . l_indent . l_symbol . "CLASS: [TODO: class name]\n"
	    \ . l_indent . l_symbol . "\n"
	    \ . l_indent . l_symbol . "[TODO: Add your description here]" . "\n" 
	    \ . l_indent . l_symbol . "\n\n"
  elseif a:type == "function"
    let str = l_symbol . " Function: [TODO: Function name]\n"
	    \ . l_indent . l_symbol . "\n"
	    \ . l_indent . l_symbol . " [TODO: Add you description here]\n"
	    \ . l_indent . l_symbol . "\n\n"
  elseif a:type == "task"
    let str = l_symbol . " Task: [TODO: Function name]\n"
	    \ . l_indent . l_symbol . "\n"
	    \ . l_indent . l_symbol . " [TODO: Add you description here]\n"
	    \ . l_indent . l_symbol . "\n\n"
  endif
	 
  return str
endfunc
